# create a new resource, the imperative way.
# This may be used in secrets.
kubectl create <resource> <resource name>

# create a new resource; the declarative way
# This is the preferred way.
# Advantages: - Easy to write by just modifying the yaml file.
	     - Much cleaner format of yaml files.
	     
kubectl apply -f manifest-file.yaml

# create new resources at once
kubectl apply -f .

# create pod using image from docker hub
kubectl run <pod name> --image=<image name: version(optional)>

# create pod from local docker images
kubectl run <pod name> --image=<image name: version(optional)> --image-pull-policy=Never

# edit a specific resource
kubectl edit <resource> <resource name>

# show all resources available in our cluster
kubectl get all

# show persistent volumes
kubectl get pv

# show persistent volume claims
kubectl get pvc

# show all resources in a specific namespace
# Note: All commands are written in the default namespace by default
kubectl get all -n <namespace name>

# show available resources
kubectl get <resource>

# delete specific resource
kubectl delete <resource> <resource name>

# delete all resources
kubectl delete all -all

# delete all items in a resource
kubectl delete <resource> --all

# describe the details of a resource
kubectl describe <resource> <resource name>

# get the logs of a resource
kubectl log <resource> <resource name>

# get events for debugging
kubectl get events --sort-by=.metadata.creationTimestamp

# remove docker image
docker rmi <image id>

# using local docker images
1. # we need to configure docker engine to run inside minikube
minikube docker-env
eval $(minikube docker-env)

minikube image ls --format table # list available images

kubectl run <pod name> --image=<image name> --image-pull-policy=Never --restart=Never # run our local image

# make sure to exit the terminal to disconnect docker cli and repeat the process to reconnect

2. # we can also load images without configuring docker cli then repeat other processes as above 
minikube image load <image name>

3. # we can also build images inside minikube
minikube image build -t <image name> -f ./Dockerfile .


# there's no need to specify a resource type as a separate argument when the resource name is similar.
# This also applies to all options not just describe e.g
kubectl describe pods pods/client-server
# instead
kubectl describe pod/client-server
# but the following will not work
kubectl describe deployment.app/client-depl
# instead
kubectl describe deployment deployment.app/client-depl

# other commands
minikube status # show the current status of minikube
